{"name":"30log","tagline":"A 30-lines library for object-orientation in Lua","body":"30log\r\n=====\r\n\r\n[![Build Status](https://travis-ci.org/Yonaba/30log.png)](https://travis-ci.org/Yonaba/30log)\r\n\r\n__30log__, in extenso *30 Lines Of Goodness* is a minified framework for [object-orientation](http://lua-users.org/wiki/ObjectOrientedProgramming) in Lua.\r\nIt features __class creation__, __object instantiation__, __single inheritance__ and a basic support for __mixins__.<br/>\r\nAnd, it makes __30 lines__. No less, no more.<br/>\r\n__30log__ was meant for [Lua 5.1.x](http://www.lua.org/versions.html#5.1), yet it is compatible with [Lua 5.2.x.](http://www.lua.org/versions.html#5.2)\r\n\r\n##Contents\r\n* [Download](https://github.com/Yonaba/30log/#download)\r\n* [Installation](https://github.com/Yonaba/30log/#installation)\r\n* [Quicktour](https://github.com/Yonaba/30log/#quicktour)\r\n* [Chained initialisation](https://github.com/Yonaba/30log/#chained-initialisation)\r\n* [Mixins](https://github.com/Yonaba/30log/#mixins)\r\n* [Printing classes and objects](https://github.com/Yonaba/30log/#printing-classes-and-objects)\r\n* [Class Commons support](https://github.com/Yonaba/30log/#class-commons)\r\n* [Specification](https://github.com/Yonaba/30log/#specification)\r\n* [Clean source](https://github.com/Yonaba/30log/#clean-source)\r\n* [30log global](https://github.com/Yonaba/30log/#30log-global)\r\n* [Contributors](https://github.com/Yonaba/30log/#contributors)\r\n\r\n##Download\r\n\r\nYou can download __30log__ via:\r\n\r\n###Bash\r\n\r\n```bash\r\ngit clone git://github.com/Yonaba/30log.git --recursive\r\n````\r\n\r\n###Archive\r\n\r\n* __Zip__: [0.5.0](https://github.com/Yonaba/30log/archive/30log-0.5.0.zip) ( *latest stable, recommended* ) | [older versions](https://github.com/Yonaba/30log/tags)\r\n* __Tar.gz__: [0.5.0](https://github.com/Yonaba/30log/archive/30log-0.5.0.tar.gz) ( *latest stable, recommended* ) | [older versions](https://github.com/Yonaba/30log/tags)\r\n\r\n###LuaRocks\r\n\r\n```\r\nluarocks install 30log\r\n````\r\n\r\n###MoonRocks\r\n\r\n```bash\r\nluarocks install --server=http://rocks.moonscript.org/manifests/Yonaba 30log\r\n````\r\n\r\n##Installation\r\nCopy the file [30log.lua](https://github.com/Yonaba/30log/blob/master/30log.lua) inside your project folder,\r\ncall it using [require](http://pgl.yoyo.org/luai/i/require) function. It will return a single local function, \r\nkeeping safe the global environment.<br/>\r\n\r\n##Quicktour\r\n###Creating a class\r\nCreating a new class is fairly simple. Just call the returned function, then add some properties to this class :\r\n\r\n```lua\r\nclass = require '30log'\r\nWindow = class ()\r\nWindow.x, Window.y = 10, 10\r\nWindow.width, Window.height = 100,100\r\n```\r\n\r\nYou can also make it shorter, packing the default properties and their values within a \r\ntable and then pass it as a single argument to the `class` function :\r\n\r\n```lua\r\nclass = require '30log'\r\nWindow = class { width = 100, height = 100, x = 10, y = 10}\r\n```\r\n\r\n###Named classes\r\nAs of [v0.4.1](https://github.com/Yonaba/30log/blob/master/version_history.md#041-02142013), classes can be named.\r\n<br/>To name a class, you will have to set the desired name as a string value to the reserved key `__name` :\r\n\r\n```lua\r\nclass = require '30log'\r\nWindow = class ()\r\nWindow.__name = 'Window'\r\n```\r\n\r\nThis feature can be quite useful when debugging your code. See the section \r\n[printing classes](https://github.com/Yonaba/30log/#printing-classes-and-objects) for more details.\r\n\r\n###Instances\r\n\r\nYou can easily create new __instances__ (objects) from a class using the __default instantiation method__ \r\nnamed `new()`:\r\n\r\n```lua\r\nappFrame = Window:new()\r\nprint(appFrame.x,appFrame.y) --> 10, 10\r\nprint(appFrame.width,appFrame.height) --> 100, 100\r\n```\r\n\r\nThere is a shorter version though. You can call new class itself __as a function__ :\r\n\r\n```lua\r\nappFrame = Window()\r\nprint(appFrame.x,appFrame.y) --> 10, 10\r\nprint(appFrame.width,appFrame.height) --> 100, 100\r\n```\r\n\r\nFrom the two examples above, you might have noticed that once an object is created from a class, it \r\nalready implements the properties of his mother class. That's the definition of `inheritance`. \r\nSo, by default, the properties of the new object copy their values from the mother class.<br/>\r\n<br/>\r\nYet, you can init new objects from a class with custom values for properties. To accomplish that, \r\nyou will have to implement a __class constructor__ into the class. Typically, it is a method that is \r\ninternally called right after an object was derived from a class and that can interact on the so-called \r\nobject to alter the values of its properties.<br/>\r\nBy default, __30log__ uses the reserved key `__init` as a __class constructor__.\r\n\r\n```lua\r\nWindow = class { width = 100, height = 100, x = 10, y = 10}\r\nfunction Window:__init(x,y,width,height)\r\n  self.x,self.y = x,y\r\n  self.width,self.height = width,height\r\nend\r\n\r\nappFrame = Window:new(50,60,800,600)\r\n   -- same as: appFrame = Window(50,60,800,600)\r\nprint(appFrame.x,appFrame.y) --> 50, 60\r\nprint(appFrame.width,appFrame.height) --> 800, 600\r\n```\r\n\r\n__Note:__ As of [v0.4.0](https://github.com/Yonaba/30log/blob/master/version_history.md#040-02132013), \r\n`__init` can also be a __table with named args__. </br>\r\nIn that case though, the values of each single object's properties will be taken from the table \r\n`__init` upon instantiation, no matter what the values passed-in at instantiation would be.\r\n\r\n```lua\r\nWindow = class()\r\nWindow.__init = { width = 100, height = 100, x = 10, y = 10}\r\n\r\nappFrame = Window:new(50,60,800,600)\r\n   -- or appFrame = Window(50,60,800,600)\r\nprint(appFrame.x,appFrame.y) --> 10, 10\r\nprint(appFrame.width,appFrame.height) --> 100, 100\r\n````\r\n\r\n###Methods\r\n__Methods__ are supported. Obviously.\r\n\r\n```lua\r\nWindow = class { width = 100, height = 100, w = 10, y = 10}\r\nfunction Window:__init(x,y,width,height)\r\n  self.x,self.y = x,y\r\n  self.width,self.height = width,height\r\nend\r\n\r\nfunction Window:set(x,y)\r\n  self.x, self.y = x, y\r\nend\r\n\r\nfunction Window:resize(width, height)\r\n  self.width, self.height = width, height\r\nend\r\n\r\nappFrame = Window()\r\nappFrame:set(50,60)\r\nprint(appFrame.x,appFrame.y) --> 50, 60\r\nappFrame:resize(800,600)\r\nprint(appFrame.width,appFrame.height) --> 800, 600\r\n```\r\n\r\n###Inheritance\r\nA class can __inherit__ from any other class using a reserved method named `extends`.\r\nSimilarly to `class`, this method also takes an optional table with named args as argument \r\nto include __the new properties__ that the derived class will implement.\r\nThe new class will inherit his mother class __properties__ as well as __methods__.\r\n\r\n```lua\r\nWindow = class { width = 100, height = 100, x = 10, y = 10}\r\nFrame = Window:extends { color = 'black' }\r\nprint(Frame.x, Frame.y) --> 10, 10\r\n\r\nappFrame = Frame()\r\nprint(appFrame.x,appFrame.y) --> 10, 10\r\n```\r\n\r\nA derived class can __redefine any method__ implemented in its base class (or mother class).\r\nTherefore, the derived class still has access to his mother class methods and properties via a \r\nreserved key named `super`.<br/>\r\n\r\n```lua\r\n-- Let's use this feature to build a class constructor for our `Frame` class.\r\n\r\n-- The base class \"Window\"\r\nWindow = class { width = 100, height = 100, x = 10, y = 10}\r\nfunction Window:__init(x,y,width,height)\r\n  self.x,self.y = x,y\r\n  self.width,self.height = width,height\r\nend\r\n\r\n-- A method\r\nfunction Window:set(x,y)\r\n  self.x, self.y = x, y\r\nend\r\n\r\n-- A derived class named \"Frame\"\r\nFrame = Window:extends { color = 'black' }\r\nfunction Frame:__init(x,y,width,height,color)\r\n  -- Calling the superclass constructor\r\n  Frame.super.__init(self,x,y,width,height)\r\n  -- Setting the extra class member\r\n  self.color = color\r\nend\r\n\r\n-- Redefining the set() method\r\nfunction Frame:set(x,y)\r\n  self.x = x - self.width/2\r\n  self.y = y - self.height/2\r\nend\r\n\r\n-- An appFrame from \"Frame\" class\r\nappFrame = Frame(100,100,800,600,'red')\r\nprint(appFrame.x,appFrame.y) --> 100, 100\r\n\r\n-- Calls the new set() method\r\nappFrame:set(400,400)\r\nprint(appFrame.x,appFrame.y) --> 0, 100\r\n\r\n-- Calls the old set() method in the mother class \"Windows\"\r\nappFrame.super.set(appFrame,400,300)\r\nprint(appFrame.x,appFrame.y) --> 400, 300\r\n```\r\n\r\n##Chained initialisation\r\nIn a single inheritance tree,  the `__init` constructor can be chained from one class to \r\nanother ( *Initception ?* ).\r\n\r\n```lua\r\n-- A mother class 'A'\r\nlocal A = Class()\r\nfunction A.__init(instance,a)\r\n  instance.a = a\r\nend\r\n\r\n-- Class 'B', deriving from class 'A'\r\nlocal B = A:extends()\r\nfunction B.__init(instance, a, b)\r\n  B.super.__init(instance, a)\r\n  instance.b = b\r\nend\r\n\r\n-- Class 'C', deriving from class 'B'\r\nlocal C = B:extends()\r\nfunction C.__init(instance, a, b, c)\r\n  C.super.__init(instance,a, b)\r\n  instance.c = c\r\nend\r\n\r\n-- Class 'D', deriving from class 'C'\r\nlocal D = C:extends()\r\nfunction D.__init(instance, a, b, c, d)\r\n  D.super.__init(instance,a, b, c)\r\n  instance.d = d\r\nend\r\n\r\n-- Creating an instance of class 'D'\r\nlocal objD = D(1,2,3,4)\r\nfor k,v in pairs(objD) do print(k,v) end\r\n\r\n-- Output:\r\n--> a  1\r\n--> d  4\r\n--> c\t3\r\n--> b\t2\r\n```\r\n\r\n##Mixins\r\n\r\nAs of [v0.5.0](https://github.com/Yonaba/30log/blob/master/version_history.md#050-06132013), __30log__ provides a basic support\r\nfor [mixins](http://en.wikipedia.org/wiki/Mixin). This is a powerful concept that can be use to implement a \r\nfunctionnality into differents classes without having any special relationship between them, such as \r\ninheritance.<br/>\r\n__30log__ implements the concept of __mixin__ as an object (actually a *simple lua table*) containing a \r\n**set of methods**. To include a mixin in a class, use the reserved key named `with`.\r\n\r\n```lua\r\n-- A mixin\r\nGeometry = {\r\n  getArea = function(self) return self.width, self.height end,\r\n  resize = function(self, width, height) self.width, self.height = width, height end\r\n}\r\n\r\n-- Let's define two unrelated classes\r\nWindow = class {width = 480, height = 250}\r\nButton = class {width = 100, height = 50, onClick = false}\r\n\r\n-- Include the \"Geometry\" mixin inside the two classes\r\nWindow:with(Geometry)\r\nButton:with(Geometry)\r\n\r\n-- Let's define objects from those classes\r\nlocal aWindow = Window()\r\nlocal aButton = Button()\r\n\r\n-- Objects can use functionalities brought by the mixin.\r\nprint(aWindow:getArea()) --> 480, 250\r\nprint(aButton:getArea()) --> 100, 50\r\n\r\naButton:resize(225,75)\r\nprint(aButton.width, aButton.height) --> 255, 75\r\n````\r\n\r\n__Note:__ When including a mixin into a class, **only methods** (functions, actually) will be imported into the \r\nclass.\r\n\r\n##Printing classes and objects\r\nAs of [v0.4.0](https://github.com/Yonaba/30log/blob/master/version_history.md#040-02132013), any attempt to [print](http://pgl.yoyo.org/luai/i/print) or [tostring](http://pgl.yoyo.org/luai/i/tostring) a __class__ or an __instance__ will return a special string, mostly meant for debugging purposes.\r\n\r\n```lua\r\n-- Let's illustrate this, with an unnamed __Cat__ class:\r\n\r\n-- A Cat Class\r\nlocal Cat = class()\r\nprint(Cat) --> \"class (Unnamed): <table: 00550AD0>\"\r\n\r\nlocal kitten = Cat()\r\nprint(kitten) --> \"object (of Unnamed): <table: 00550C10>\"\r\n````\r\n\r\n\r\n```lua\r\n-- Let's define a named __Cat__ class now:\r\n\r\n-- A Cat Class\r\nlocal Cat = class()\r\nCat.__name = 'Cat'\r\nprint(Cat) --> \"class (Cat): <table: 00411858>\"\r\n\r\nlocal kitten = Cat()\r\nprint(kitten) --> \"object (of Cat): <table: 00411880>\"\r\n````\r\n\r\n##Class Commons\r\n[Class-Commons](https://github.com/bartbes/Class-Commons) is an interface that provides a common \r\nAPI for a wide range of object orientation libraries in Lua.\r\nThe original support for Class Commmons was provided by [TsT2005](https://github.com/tst2005). \r\n\r\n```lua\r\nrequire(\"30logclasscommons\")\r\n\r\n-- Now use these\r\ncommon.class(...)\r\ncommon.instance(...)\r\n```\r\n\r\n##Specification\r\n\r\n###30log specs\r\n\r\nYou can run the included specs with [Telescope](https://github.com/norman/telescope) using the following \r\ncommand from the root foolder:\r\n\r\n```\r\nlua tsc -f tests/lib_specs/*\r\n```\r\n\r\n###Class-Commons testing implementation\r\n\r\nYou can test the implementation of Class-commons with the following command from the root folder:\r\n\r\n```\r\nlua tests/class_commons/tests/tests.lua tests/class_commons/commons_tests\r\n```\r\n\r\n**Note**: The tests are included as a submodule in this repository. Make sure to have this file in your local copy.\r\nIn case you don't have it, fetch it with the following command from Git.\r\n\r\n```\r\ngit submodule init\r\ngit submodule update\r\n```\r\n\r\n##Clean source\r\n\r\n__30log__ was initially designed for minimalistic purposes. But then commit after commit, I came  with a source code\r\nthat was obviously surpassing 30 lines. I opted to stick to the \"30-lines\" rule. And, as a trade-off, the original source is not \r\nmuch elegant, yet 100 % functional.<br/>\r\nFor those who might be interested, though, the file [30logclean.lua](https://github.com/Yonaba/30log/blob/master/30logclean.lua) contains the full source code, \r\nproperly formatted and well indented for your perusal.\r\n\r\n##30log global\r\n\r\nNot much. The relevant file [30logglobal.lua](https://github.com/Yonaba/30log/blob/master/30logglobal.lua) features the same source as the original [30log.lua](https://github.com/Yonaba/30log/blob/master/30log.lua), excepts that it sets a global function named `class`.\r\nThis is convenient for some embed Lua implementations such as [Codea](http://twolivesleft.com/Codea/).\r\n\r\n##Contributors\r\n* [TsT2005](https://github.com/tst2005), for Class-commons support.\r\n\r\n\r\n##License\r\nThis work is under [MIT-LICENSE](http://www.opensource.org/licenses/mit-license.php)<br/>\r\nCopyright (c) 2012-2013 Roland Yonaba\r\n\r\n    Permission is hereby granted, free of charge, to any person obtaining a\r\n    copy of this software and associated documentation files (the\r\n    \"Software\"), to deal in the Software without restriction, including\r\n    without limitation the rights to use, copy, modify, merge, publish,\r\n    distribute, sublicense, and/or sell copies of the Software, and to\r\n    permit persons to whom the Software is furnished to do so, subject to\r\n    the following conditions:\r\n\r\n    The above copyright notice and this permission notice shall be included\r\n    in all copies or substantial portions of the Software.\r\n\r\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n    OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\n    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\n    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\n    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n","google":"UA-33850683-1","note":"Don't delete this file! It's used internally to help with page regeneration."}