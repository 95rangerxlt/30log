{"body":"30log\r\n=====\r\n\r\n__30log__, in extenso *30 Lines Of Goodness* is a minified library for [pseudo object-orientation](http://lua-users.org/wiki/ObjectOrientedProgramming) in Lua.\r\nIt features __class creation__, __object instantiation__, __class inheritance__ and __method overload__ through inheritance.<br/>\r\nAnd yes, it makes __30 lignes__ length. No less, no more.\r\n\r\n##Installation\r\nCopy the file [30log.lua](https://github.com/Yonaba/30log/blob/master/Lib/30log.lua) inside your project folder, call it using [require](http://pgl.yoyo.org/luai/i/require) function.<br/>\r\nWhen loaded, __30log__ returns its main function .\r\n\r\n##Quicktour\r\n###Creating a class\r\nMaking a new class is fairly simple. Just call the returned function, then add some properties to this class :\r\n\r\n```lua\r\nclass = require '30log'\r\nWindow = class ()\r\nWindow.x, Window.y = 10, 10\r\nWindow.width, Window.height = 100,100\r\n```\r\n\r\nYou can also shortcut it, passing the default properties as a table to <tt>class</tt> :\r\n\r\n```lua  \r\nclass = require '30log'\r\nWindow = class { width = 100, height = 100, w = 10, y = 10}\r\n```  \r\n\r\n###Instances\r\n\r\nOnce a class is set, you can easily create new __instances__ from the class.\r\n\r\n```lua\r\nappFrame = Window:new()\r\nprint(appFrame.x,appFrame.y) --> 10, 10\r\nprint(appFrame.width,appFrame.height) --> 100, 100\r\n```\r\n\r\nYou can also use a shortcut, calling the class __as a function__ :\r\n\r\n```lua\r\nappFrame = Window()\r\nprint(appFrame.x,appFrame.y) --> 10, 10\r\nprint(appFrame.width,appFrame.height) --> 100, 100\r\n```\r\n\r\nFrom the two examples above, you might have noticed that once an instance is created from a class, its properties takes __by default__ the class properties.\r\nBut, you can init objects from a class with your own specific properties. To accomplish that, you must have implemented a method named <tt>**__init**</tt> inside the base class.<br/>\r\nIn a nutshell, <tt>**__init**</tt> is the __default method__ to be used as a __class constructor__.\r\n\r\n```lua\r\nWindow = class { width = 100, height = 100, x = 10, y = 10}\r\nfunction Window:__init(x,y,width,height)\r\n  self.x,self.y = x,y\r\n  self.width,self.height = width,height\r\nend\r\n\r\nappFrame = Window:new(50,60,800,600)\r\n   -- or appFrame = Window(50,60,800,600)\r\nprint(appFrame.x,appFrame.y) --> 50, 60\r\nprint(appFrame.width,appFrame.height) --> 800, 600\r\n```\r\n\r\n###Methods\r\n__Methods__ are supported. Obviously.\r\n\r\n```lua\r\nWindow = class { width = 100, height = 100, w = 10, y = 10}\r\nfunction Window:__init(x,y,width,height)\r\n  self.x,self.y = x,y\r\n  self.width,self.height = width,height\r\nend\r\n\r\nfunction Window:set(x,y)\r\n  self.x, self.y = x, y \r\nend\r\n\r\nfunction Window:resize(width, height)\r\n  self.width, self.height = width, height\r\nend\r\n\r\nappFrame = Window()\r\nappFrame:set(50,60)\r\nprint(appFrame.x,appFrame.y) --> 50, 60\r\nappFrame:resize(800,600)\r\nprint(appFrame.width,appFrame.height) --> 800, 600\r\n```\r\n\r\n###Inheritance\r\nA class can __derive__ from a base class using a default method named <tt>:extends</tt>.\r\nThe new class will inherit his mother class default __members__ and __methods__.\r\n\r\n```lua\r\nWindow = class { width = 100, height = 100, x = 10, y = 10}\r\nFrame = Window:extends { color = 'black' }\r\nprint(Frame.x, Frame.y) --> 10, 10\r\n\r\nappFrame = Frame()\r\nprint(appFrame.x,appFrame.y) --> 10, 10\r\n```\r\n\r\nA derived class can __overload any method__ defined in its base class (or mother class). Therefore, the derived class still has access to his mother class methods via a special key named <tt>super</tt>.<br/>\r\nLet's use this feature to build a class constructor for our <tt>Frame</tt> class.\r\n\r\n```lua\r\n-- The base class \"Window\"\r\nWindow = class { width = 100, height = 100, x = 10, y = 10}\r\nfunction Window:__init(x,y,width,height)\r\n  self.x,self.y = x,y\r\n  self.width,self.height = width,height\r\nend\r\n\r\nfunction Window:set(x,y)\r\n  self.x, self.y = x, y\r\nend\r\n\r\n-- A derived class named \"Frame\"\r\nFrame = Window:extends { color = 'black' }\r\nfunction Frame:__init(x,y,width,height,color)\r\n  -- Calling the superclass constructor\r\n  self.super.__init(self,x,y,width,height)\r\n  -- Setting the extra class member\r\n  self.color = color\r\nend\r\n\r\n-- Overloading Window:set()\r\nfunction Frame:set(x,y)\r\n  self.x = x - self.width/2\r\n  self.y = y - self.height/2\r\nend\r\n\r\n-- A appFrame from \"Frame\" class\r\nappFrame = Frame(100,100,800,600,'red')\r\nprint(appFrame.x,appFrame.y) --> 100, 100\r\n\r\nappFrame:set(400,400)\r\nprint(appFrame.x,appFrame.y) --> 0, 100\r\n\r\nappFrame.super.set(appFrame,400,300)\r\nprint(appFrame.x,appFrame.y) --> 400, 300\r\n```\r\n\r\n##License\r\nThis work is under [MIT-LICENSE](http://www.opensource.org/licenses/mit-license.php)<br/>\r\nCopyright (c) 2012 Roland Yonaba\r\n\r\n    Permission is hereby granted, free of charge, to any person obtaining a\r\n    copy of this software and associated documentation files (the\r\n    \"Software\"), to deal in the Software without restriction, including\r\n    without limitation the rights to use, copy, modify, merge, publish,\r\n    distribute, sublicense, and/or sell copies of the Software, and to\r\n    permit persons to whom the Software is furnished to do so, subject to\r\n    the following conditions:\r\n\r\n    The above copyright notice and this permission notice shall be included\r\n    in all copies or substantial portions of the Software.\r\n\r\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n    OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\n    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\n    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\n    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","name":"30log","tagline":"A 30-lines library for object-orientation in Lua","google":"UA-33850683-1","note":"Don't delete this file! It's used internally to help with page regeneration."}