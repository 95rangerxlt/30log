{"name":"30log","tagline":"A 30-lines library for object-orientation in Lua","body":"30log\r\n=====\r\n\r\n[![Build Status](https://travis-ci.org/Yonaba/30log.png)](https://travis-ci.org/Yonaba/30log)\r\n[![Coverage Status](https://coveralls.io/repos/Yonaba/30log/badge.png?branch=master)](https://coveralls.io/r/Yonaba/30log?branch=master)\r\n[![License](http://img.shields.io/badge/Licence-MIT-brightgreen.svg)](LICENSE)\r\n\r\n__30log__, in extenso *30 Lines Of Goodness* is a minified framework for [object-orientation](http://lua-users.org/wiki/ObjectOrientedProgramming) in Lua.\r\nIt features __named (and unnamed) classes__, __single inheritance__ and a basic support for __mixins__.<br/>\r\nIt makes __30 lines__. No less, no more.<br/>\r\n__30log__ is [Lua 5.1](http://www.lua.org/versions.html#5.1) and [Lua 5.2](http://www.lua.org/versions.html#5.2) compatible.\r\n\r\n##Contents\r\n* [Download](https://github.com/Yonaba/30log/#download)\r\n* [Installation](https://github.com/Yonaba/30log/#installation)\r\n* [Quicktour](https://github.com/Yonaba/30log/#quicktour)\r\n* [Chained initialisation](https://github.com/Yonaba/30log/#chained-initialisation)\r\n* [Mixins](https://github.com/Yonaba/30log/#mixins)\r\n* [Printing classes and objects](https://github.com/Yonaba/30log/#printing-classes-and-objects)\r\n* [Class Commons support](https://github.com/Yonaba/30log/#class-commons)\r\n* [Specification](https://github.com/Yonaba/30log/#specification)\r\n* [Source](https://github.com/Yonaba/30log/#source)\r\n* [Benchmark](https://github.com/Yonaba/30log/#benchmark)\r\n* [Contributors](https://github.com/Yonaba/30log/#contributors)\r\n\r\n##Download\r\n\r\nYou can download __30log__ via:\r\n\r\n###Bash\r\n\r\n```bash\r\ngit clone git://github.com/Yonaba/30log.git\r\n````\r\n\r\n###Archive\r\n\r\n* __Zip__: [0.9.1](https://github.com/Yonaba/30log/archive/30log-0.9.1.zip) ( *latest stable, recommended* ) | [older versions](https://github.com/Yonaba/30log/tags)\r\n* __Tar.gz__: [0.9.1](https://github.com/Yonaba/30log/archive/30log-0.9.1.tar.gz) ( *latest stable, recommended* ) | [older versions](https://github.com/Yonaba/30log/tags)\r\n\r\n###LuaRocks\r\n\r\n```\r\nluarocks install 30log\r\n````\r\n\r\n###MoonRocks\r\n\r\n```bash\r\nluarocks install --server=http://rocks.moonscript.org/manifests/Yonaba 30log\r\n````\r\n\r\n##Installation\r\nCopy the file [30log.lua](https://github.com/Yonaba/30log/blob/master/30log.lua) inside your project folder,\r\ncall it using [require](http://pgl.yoyo.org/luai/i/require) function. It will return a single local function, \r\nkeeping safe the global environment.<br/>\r\n\r\n##Quicktour\r\n###Creating a class\r\nCreating a new class is fairly simple. Just call the returned function, then add some properties to this class :\r\n\r\n```lua\r\nclass = require '30log'\r\nWindow = class ()\r\nWindow.x, Window.y = 10, 10\r\nWindow.width, Window.height = 100,100\r\n```\r\n\r\nYou can also make it shorter, packing the default properties and their values within a \r\ntable and then pass it as a single argument to the `class` function :\r\n\r\n```lua\r\nclass = require '30log'\r\nWindow = class { width = 100, height = 100, x = 10, y = 10}\r\n```\r\n\r\n###Named classes\r\nClasses can be named.<br/>\r\nTo name a class, you will have to set the desired name as a string value to the reserved key `__name` :\r\n\r\n```lua\r\nclass = require '30log'\r\nWindow = class ()\r\nWindow.__name = 'Window'\r\n```\r\n\r\nThis feature can be quite useful when debugging your code. See the section \r\n[printing classes](https://github.com/Yonaba/30log/#printing-classes-and-objects) for more details.\r\n\r\n###Instances\r\n\r\n####Creating instances\r\n\r\nYou can easily create new __instances__ (objects) from a class using the __default instantiation method__ \r\nnamed `new()`:\r\n\r\n```lua\r\nappFrame = Window:new()\r\nprint(appFrame.x,appFrame.y) --> 10, 10\r\nprint(appFrame.width,appFrame.height) --> 100, 100\r\n```\r\n\r\nThere is a shorter version though. You can call new class itself with parens, __just like a function__ :\r\n\r\n```lua\r\nappFrame = Window()\r\nprint(appFrame.x,appFrame.y) --> 10, 10\r\nprint(appFrame.width,appFrame.height) --> 100, 100\r\n```\r\n\r\nFrom the two examples above, you might have noticed that once an object is created from a class, it \r\nalready shares the properties of his mother class. That's the very basis of `inheritance`. \r\nSo, by default, the attributes of the newly created object will copy their values from its mother class.<br/>\r\n<br/>\r\nYet, you can init new objects from a class with custom values for properties. To accomplish that, \r\nyou will have to implement your own __class constructor__. Typically, it is a method (a function) that will be\r\ncalled whenever the new() method is used from the class to derive a new object, and then define custom attributes and values for this object.<br/>\r\nBy default, __30log__ uses the reserved key `__init` as a __class constructor__.\r\n\r\n```lua\r\nWindow = class { width = 100, height = 100, x = 10, y = 10}\r\nfunction Window:__init(x,y,width,height)\r\n  self.x,self.y = x,y\r\n  self.width,self.height = width,height\r\nend\r\n\r\nappFrame = Window:new(50,60,800,600)\r\n   -- same as: appFrame = Window(50,60,800,600)\r\nprint(appFrame.x,appFrame.y) --> 50, 60\r\nprint(appFrame.width,appFrame.height) --> 800, 600\r\n```\r\n\r\n`__init` can also be a __table with named keys__. </br>\r\nIn that case though, the values of each single object's properties will be taken from this table\r\nupon instantiation, no matter what the values passed-in at instantiation would be. \r\n\r\n```lua\r\nWindow = class()\r\nWindow.__init = { width = 100, height = 100, x = 10, y = 10}\r\n\r\nappFrame = Window:new(50,60,800,600)\r\n   -- or appFrame = Window(50,60,800,600)\r\nprint(appFrame.x,appFrame.y) --> 10, 10\r\nprint(appFrame.width,appFrame.height) --> 100, 100\r\n````\r\n\r\n####Under the hood\r\n*30log* classes are metatables of their own instances. This implies that one can inspect the mother/son \r\nrelationship between a class and its instance via Lua's standard function [getmetatable](http://www.lua.org/manual/5.2/manual.html#pdf-getmetatable).\r\n\r\n```lua\r\nlocal aClass = class()\r\nlocal someInstance = aClass()\r\nprint(getmetatable(someInstance) == aClass) --> true\r\n````\r\n\r\nAlso, classes are metatables of their derived classes.\r\n\r\n```lua\r\nlocal aClass = class()\r\nlocal someDerivedClass = aClass:extends()\r\nprint(getmetatable(someDerivedClass) == aClass) --> true\r\n````\r\n\r\n###Methods and metamethods\r\nObjects can call their class __methods__.\r\n\r\n```lua\r\nWindow = class { width = 100, height = 100, w = 10, y = 10}\r\nfunction Window:__init(x,y,width,height)\r\n  self.x,self.y = x,y\r\n  self.width,self.height = width,height\r\nend\r\n\r\nfunction Window:set(x,y)\r\n  self.x, self.y = x, y\r\nend\r\n\r\nfunction Window:resize(width, height)\r\n  self.width, self.height = width, height\r\nend\r\n\r\nappFrame = Window()\r\nappFrame:set(50,60)\r\nprint(appFrame.x,appFrame.y) --> 50, 60\r\nappFrame:resize(800,600)\r\nprint(appFrame.width,appFrame.height) --> 800, 600\r\n```\r\n\r\nObjects cannot be used to instantiate new objects though.\r\n\r\n```lua\r\nappFrame = Window:new()\r\naFrame = appFrame:new() -- Creates an error\r\naFrame = appFrame()     -- Also creates an error\r\n````\r\n\r\nClasses supports metamethods as well as methods. Those metamethods can be inherited.\r\nIn the following example, we will use the `+` operator to increase the window size.\r\n\r\n```lua\r\nWindow.__add = function(w, size) \r\n  w.width = w.width + size\r\n  w.height = w.height + size\r\n  return w\r\nend\r\n\r\nwindow = Window()                                -- creates a new Window instance\r\nwindow:resize(600,300)                           -- resizes the new window\r\nprint(window.width, window.height) --> 600, 300\r\nwindow = window + 100                            -- increases the window dimensions\r\nprint(window.width, window.height) --> 700, 400\r\n\r\nFrame = Window:extends()                         -- creates a Frame class deriving from Window class\r\nframe = Frame()                                  -- creates a new Frame instance\r\nframe:resize(400,300)                            -- Resizes the new frame\r\nprint(frame.width, frame.height) --> 400, 300\r\nframe = frame + 50                               -- increases the frame dimensions\r\nprint(frame.width, frame.height) --> 450, 350\r\n````\r\n\r\n\r\n###Inheritance\r\n\r\nA class can __inherit__ from any other class using a reserved method named `extends`.\r\nSimilarly to `class`, this method also takes an optional table with named keys as argument \r\nto include __new properties__ that the derived class will implement.\r\nThe new class will inherit his mother class __properties__ as well as its __methods__.\r\n\r\n```lua\r\nWindow = class { width = 100, height = 100, x = 10, y = 10}\r\nFrame = Window:extends { color = 'black' }\r\nprint(Frame.x, Frame.y) --> 10, 10\r\n\r\nappFrame = Frame()\r\nprint(appFrame.x,appFrame.y) --> 10, 10\r\n```\r\n\r\nA derived class can __redefine any method__ implemented in its base class (or mother class).\r\nTherefore, the derived class *still* has access to his mother class methods and properties via a \r\nreserved key named `super`.<br/>\r\n\r\n```lua\r\n-- Let's use this feature to build a class constructor for our `Frame` class.\r\n\r\n-- The base class \"Window\"\r\nWindow = class { width = 100, height = 100, x = 10, y = 10}\r\nfunction Window:__init(x,y,width,height)\r\n  self.x,self.y = x,y\r\n  self.width,self.height = width,height\r\nend\r\n\r\n-- A method\r\nfunction Window:set(x,y)\r\n  self.x, self.y = x, y\r\nend\r\n\r\n-- A derived class named \"Frame\"\r\nFrame = Window:extends { color = 'black' }\r\nfunction Frame:__init(x,y,width,height,color)\r\n  -- Calling the superclass constructor\r\n  Frame.super.__init(self,x,y,width,height)\r\n  -- Setting the extra class member\r\n  self.color = color\r\nend\r\n\r\n-- Redefining the set() method\r\nfunction Frame:set(x,y)\r\n  self.x = x - self.width/2\r\n  self.y = y - self.height/2\r\nend\r\n\r\n-- An appFrame from \"Frame\" class\r\nappFrame = Frame(100,100,800,600,'red')\r\nprint(appFrame.x,appFrame.y) --> 100, 100\r\n\r\n-- Calls the new set() method\r\nappFrame:set(400,400)\r\nprint(appFrame.x,appFrame.y) --> 0, 100\r\n\r\n-- Calls the old set() method in the mother class \"Windows\"\r\nappFrame.super.set(appFrame,400,300)\r\nprint(appFrame.x,appFrame.y) --> 400, 300\r\n```\r\n\r\n###Inspecting inheritance\r\n\r\n`class.is` can check if a given class derives from another class.\r\n\r\n```lua\r\nlocal aClass = class()\r\nlocal aDerivedClass = aClass:extends()\r\nprint(aDerivedClass:is(aClass)) --> true\r\n````\r\n\r\nIt also returns *true* when the given class is not necessarily the immediate ancestor of the calling class.\r\n\r\n```lua\r\nlocal aClass = class()\r\nlocal aDerivedClass = aClass:extends():extends():extends() -- 3-level depth inheritance\r\nprint(aDerivedClass:is(aClass)) --> true\r\n````\r\n\r\nSimilarly `instance.is` can check if a given instance derives from a given class.\r\n\r\n```lua\r\nlocal aClass = class()\r\nlocal anObject = aClass()\r\nprint(anObject:is(aClass)) --> true\r\n````\r\n\r\nIt also returns *true* when the given class is not the immediate ancestor.\r\n\r\n```lua\r\nlocal aClass = class()\r\nlocal aDerivedClass = aClass:extends():extends():extends() -- 3-level depth inheritance\r\nlocal anObject = aDerivedClass()\r\nprint(anObject:is(aDerivedClass)) --> true\r\nprint(anObject:is(aClass)) --> true\r\n````\r\n\r\n##Chained initialisation\r\nIn a single inheritance tree,  the `__init` constructor can be chained from one class to \r\nanother.<br/>\r\n\r\nThis is called *initception*.<br/>\r\nAnd, yes, *it is a joke.*\r\n\r\n```lua\r\n-- A mother class 'A'\r\nlocal A = Class()\r\nfunction A.__init(instance,a)\r\n  instance.a = a\r\nend\r\n\r\n-- Class 'B', deriving from class 'A'\r\nlocal B = A:extends()\r\nfunction B.__init(instance, a, b)\r\n  B.super.__init(instance, a)\r\n  instance.b = b\r\nend\r\n\r\n-- Class 'C', deriving from class 'B'\r\nlocal C = B:extends()\r\nfunction C.__init(instance, a, b, c)\r\n  C.super.__init(instance,a, b)\r\n  instance.c = c\r\nend\r\n\r\n-- Class 'D', deriving from class 'C'\r\nlocal D = C:extends()\r\nfunction D.__init(instance, a, b, c, d)\r\n  D.super.__init(instance,a, b, c)\r\n  instance.d = d\r\nend\r\n\r\n-- Creating an instance of class 'D'\r\nlocal objD = D(1,2,3,4)\r\nfor k,v in pairs(objD) do print(k,v) end\r\n\r\n-- Output:\r\n--> a  1\r\n--> d  4\r\n--> c  3\r\n--> b  2\r\n```\r\n\r\nThe previous syntax can also be simplified, as follows:\r\n\r\n```lua\r\nlocal A = Class()\r\nfunction A:__init(a)\r\n  self.a = a\r\nend\r\n\r\nlocal B = A:extends()\r\nfunction B:__init(a, b)\r\n  B.super.__init(self, a)\r\n  self.b = b\r\nend\r\n\r\nlocal C = B:extends()\r\nfunction C:__init(a, b, c)\r\n  C.super.__init(self, a, b)\r\n  self.c = c\r\nend\r\n\r\nlocal D = C:extends()\r\nfunction D:__init(a, b, c, d)\r\n  D.super.__init(self, a, b, c)\r\n  self.d = d\r\nend\r\n````\r\n\r\n##Mixins\r\n\r\n__30log__ provides a basic support for [mixins](http://en.wikipedia.org/wiki/Mixin). This is a powerful concept that can \r\nbe used to implement a functionality into different classes, even if they do not have any special relationship.<br/>\r\n__30log__ assumes a `mixin` to be a table containing a **set of methods** (function).<br/>\r\nTo include a mixin in a class, use the reserved key named `include`.\r\n\r\n```lua\r\n-- A mixin\r\nGeometry = {\r\n  getArea = function(self) return self.width, self.height end,\r\n  resize = function(self, width, height) self.width, self.height = width, height end\r\n}\r\n\r\n-- Let's define two unrelated classes\r\nWindow = class {width = 480, height = 250}\r\nButton = class {width = 100, height = 50, onClick = false}\r\n\r\n-- Include the \"Geometry\" mixin inside the two classes\r\nWindow:include(Geometry)\r\nButton:include(Geometry)\r\n\r\n-- Let's define objects from those classes\r\nlocal aWindow = Window()\r\nlocal aButton = Button()\r\n\r\n-- Objects can use functionalities brought by the mixin.\r\nprint(aWindow:getArea()) --> 480, 250\r\nprint(aButton:getArea()) --> 100, 50\r\n\r\naWindow:resize(225,75)\r\nprint(aWindow.width, aWindow.height) --> 255, 75\r\n````\r\n\r\nNote that, when including a mixin into a class, **only methods** (functions, actually) will be imported into the \r\nclass. Also, objects cannot include mixins.\r\n\r\n```lua\r\naWindow = Window()\r\naWindow:include(Geometry) -- produces an error\r\n````\r\n\r\n##Printing classes and objects\r\nAny attempt to [print](http://pgl.yoyo.org/luai/i/print) or [tostring](http://pgl.yoyo.org/luai/i/tostring) a __class__ or an __instance__\r\nwill return the name of the class as a string. This feature is mostly meant for debugging purposes.\r\n\r\n```lua\r\n-- Let's illustrate this, with an unnamed __Cat__ class:\r\n\r\n-- A Cat Class\r\nlocal Cat = class()\r\nprint(Cat) --> \"class(?):<table:00550AD0>\"\r\n\r\nlocal kitten = Cat()\r\nprint(kitten) --> \"object(of ?):<table:00550C10>\"\r\n````\r\n\r\nThe question mark symbol `?` means here the printed class is unnamed (or the object derives from an unnamed class).\r\n\r\n```lua\r\n-- Let's define a named __Cat__ class now:\r\n\r\n-- A Cat Class\r\nlocal Cat = class()\r\nCat.__name = 'Cat'\r\nprint(Cat) --> \"class(Cat):<table:00411858>\"\r\n\r\nlocal kitten = Cat()\r\nprint(kitten) --> \"object(of Cat):<table:00411880>\"\r\n````\r\n\r\n##Class Commons\r\n[Class-Commons](https://github.com/bartbes/Class-Commons) is an interface that provides a common \r\nAPI for a wide range of object orientation libraries in Lua. There is a small plugin, originally written by [TsT](https://github.com/tst2005) \r\nwhich provides compatibility between *30log* and *Class-commons*. <br/>\r\nSee here: [30logclasscommons](http://github.com/Yonaba/30logclasscommons).\r\n\r\n##Specification\r\n\r\nYou can run the included specs with [Telescope](https://github.com/norman/telescope) using the following \r\ncommand from the root foolder:\r\n\r\n```\r\nlua tsc -f specs/*\r\n```\r\n\r\n###Source\r\n\r\n###30logclean\r\n__30log__ was initially designed for minimalistic purposes. But then commit after commit, I came up with a source code\r\nthat was obviously surpassing 30 lines. As I wanted to stick to the \"30-lines\" rule, I had to use an ugly syntax which not much elegant, yet 100 % functional.<br/>\r\nFor those who might be interested though, the file [30logclean.lua](https://github.com/Yonaba/30log/blob/master/30logclean.lua) contains the full source code, \r\nproperly formatted and well indented for your perusal.\r\n\r\n###30logglobal\r\n\r\nThe file [30logglobal.lua](https://github.com/Yonaba/30log/blob/master/30logglobal.lua) features the exact same source as the original [30log.lua](https://github.com/Yonaba/30log/blob/master/30log.lua), \r\nexcepts that it sets a global function named `class`. This is convenient for Lua-based frameworks such as [Codea](http://twolivesleft.com/Codea/).\r\n\r\n##Benchmark\r\n\r\nPerformance tests featuring classes creation, instantiation and such have been included.\r\nYou can run these tests with the following command with Lua from the root folder, passing to the test script the actual implementation to be tested.\r\n\r\n```lua\r\nlua performance/tests.lua 30log\r\n````\r\n\r\nFind [here an example of output](https://github.com/Yonaba/30log/tree/master/performance/results.md).\r\n\r\n##Contributors\r\n* [TsT2005](https://github.com/tst2005), for the original Class-commons support.\r\n\r\n\r\n##License\r\nThis work is under [MIT-LICENSE](http://www.opensource.org/licenses/mit-license.php)<br/>\r\nCopyright (c) 2012-2014 Roland Yonaba\r\n\r\n    Permission is hereby granted, free of charge, to any person obtaining a\r\n    copy of this software and associated documentation files (the\r\n    \"Software\"), to deal in the Software without restriction, including\r\n    without limitation the rights to use, copy, modify, merge, publish,\r\n    distribute, sublicense, and/or sell copies of the Software, and to\r\n    permit persons to whom the Software is furnished to do so, subject to\r\n    the following conditions:\r\n\r\n    The above copyright notice and this permission notice shall be included\r\n    in all copies or substantial portions of the Software.\r\n\r\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n    OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\n    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\n    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\n    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/Yonaba/30log/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")","google":"UA-33850683-1","note":"Don't delete this file! It's used internally to help with page regeneration."}