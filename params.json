{"name":"30log","tagline":"A 30-lines library for object-orientation in Lua","body":"30log\r\n=====\r\n\r\n[![Build Status](https://travis-ci.org/Yonaba/30log.png)](https://travis-ci.org/Yonaba/30log)\r\n\r\n__30log__, in extenso *30 Lines Of Goodness* is a minified framework for [object-orientation](http://lua-users.org/wiki/ObjectOrientedProgramming) in Lua.\r\nIt features __class creation__, __instantiation__, __single inheritance__ .<br/>\r\nAnd, it makes __30 lines__. No less, no more.\r\n\r\n##Contents\r\n* [Download](https://github.com/Yonaba/30log/#download)\r\n* [Installation](https://github.com/Yonaba/30log/#installation)\r\n* [Quicktour](https://github.com/Yonaba/30log/#quicktour)\r\n* [Chained initialisation](https://github.com/Yonaba/30log/#chained-initialisation)\r\n* [Printing classes and objects](https://github.com/Yonaba/30log/#printing-classes-and-objects)\r\n* [Class Commons support](https://github.com/Yonaba/30log/#class-commons-support)\r\n* [Specification](https://github.com/Yonaba/30log/#specification)\r\n* [Contributors](https://github.com/Yonaba/30log/#contributors)\r\n\r\n##Download\r\n###Bash\r\n\r\n```bash\r\ngit clone git://github.com/Yonaba/30log.git\r\n````\r\n\r\n###Archive\r\n* __Zip__: [current](https://github.com/Yonaba/30log/archive/master.zip) | [old packages](https://github.com/Yonaba/30log/tags)\r\n* __Tar.gz__: [current](https://github.com/Yonaba/30log/archive/master.tar.gz) | [old packages](https://github.com/Yonaba/30log/tags)\r\n\r\n###LuaRocks\r\n\r\n```\r\nluarocks install 30log\r\n````\r\n\r\n###MoonRocks\r\n\r\n```bash\r\nluarocks install --server=http://rocks.moonscript.org/manifests/Yonaba 30log\r\n````\r\n\r\n##Installation\r\nCopy the file [30log.lua](https://github.com/Yonaba/30log/blob/master/Lib/30log.lua) inside your project folder, call it using [require](http://pgl.yoyo.org/luai/i/require) function.<br/>\r\nWhen loaded, __30log__ returns its main function.\r\n\r\n##Quicktour\r\n###Creating a class\r\nMaking a new class is fairly simple. Just call the returned function, then add some properties to this class :\r\n\r\n```lua\r\nclass = require '30log'\r\nWindow = class ()\r\nWindow.x, Window.y = 10, 10\r\nWindow.width, Window.height = 100,100\r\n```\r\n\r\nYou can also shortcut it, passing the default properties as a table to <tt>class</tt> :\r\n\r\n```lua\r\nclass = require '30log'\r\nWindow = class { width = 100, height = 100, x = 10, y = 10}\r\n```\r\n###Named classes\r\nAs of [v0.4.1](https://github.com/Yonaba/30log/blob/master/version_history.md), classes can be named, setting manually a string value (corresponding to the name you want to set) to a special key named <tt>**__name**</tt>\r\n\r\n```lua\r\nclass = require '30log'\r\nWindow = class ()\r\nWindow.__name = 'Window'\r\n```\r\n\r\nThis feature can be quite useful when debugging your code. See [printing classes](https://github.com/Yonaba/30log/#printing-classes-and-objects) for more details.\r\n###Instances\r\n\r\nOnce a class is set, you can easily create new __instances__ from the class.\r\n\r\n```lua\r\nappFrame = Window:new()\r\nprint(appFrame.x,appFrame.y) --> 10, 10\r\nprint(appFrame.width,appFrame.height) --> 100, 100\r\n```\r\n\r\nYou can also use a shortcut, calling the class __as a function__ :\r\n\r\n```lua\r\nappFrame = Window()\r\nprint(appFrame.x,appFrame.y) --> 10, 10\r\nprint(appFrame.width,appFrame.height) --> 100, 100\r\n```\r\n\r\nFrom the two examples above, you might have noticed that once an instance is created from a class, its properties takes __by default__ the class properties.\r\nBut, you can init objects from a class with your own specific properties. To accomplish that, you must have implemented a method named <tt>**__init**</tt> inside the base class.<br/>\r\nIn a nutshell, <tt>**__init**</tt> is the __default method__ to be used as a __class constructor__.\r\n\r\n```lua\r\nWindow = class { width = 100, height = 100, x = 10, y = 10}\r\nfunction Window:__init(x,y,width,height)\r\n  self.x,self.y = x,y\r\n  self.width,self.height = width,height\r\nend\r\n\r\nappFrame = Window:new(50,60,800,600)\r\n   -- or appFrame = Window(50,60,800,600)\r\nprint(appFrame.x,appFrame.y) --> 50, 60\r\nprint(appFrame.width,appFrame.height) --> 800, 600\r\n```\r\n\r\nAs of [v0.4.0](https://github.com/Yonaba/30log/blob/master/version_history.md), **<tt>__init**</tt> can also be a __table with named args__. </br>\r\nIn that case though, each instances will keep the same values for their properties, no matter what the values passed-in to the <tt>**:new**</tt> method would be.\r\n\r\n```lua\r\nWindow = class()\r\nWindow.__init = { width = 100, height = 100, x = 10, y = 10}\r\n\r\nappFrame = Window:new(50,60,800,600)\r\n   -- or appFrame = Window(50,60,800,600)\r\nprint(appFrame.x,appFrame.y) --> 10, 10\r\nprint(appFrame.width,appFrame.height) --> 100, 100\r\n````\r\n\r\n###Methods\r\n__Methods__ are supported. Obviously.\r\n\r\n```lua\r\nWindow = class { width = 100, height = 100, w = 10, y = 10}\r\nfunction Window:__init(x,y,width,height)\r\n  self.x,self.y = x,y\r\n  self.width,self.height = width,height\r\nend\r\n\r\nfunction Window:set(x,y)\r\n  self.x, self.y = x, y\r\nend\r\n\r\nfunction Window:resize(width, height)\r\n  self.width, self.height = width, height\r\nend\r\n\r\nappFrame = Window()\r\nappFrame:set(50,60)\r\nprint(appFrame.x,appFrame.y) --> 50, 60\r\nappFrame:resize(800,600)\r\nprint(appFrame.width,appFrame.height) --> 800, 600\r\n```\r\n\r\n###Inheritance\r\nA class can __derive__ from a base class using a default method named <tt>:extends</tt>.\r\nThe new class will inherit his mother class default __members__ and __methods__.\r\n\r\n```lua\r\nWindow = class { width = 100, height = 100, x = 10, y = 10}\r\nFrame = Window:extends { color = 'black' }\r\nprint(Frame.x, Frame.y) --> 10, 10\r\n\r\nappFrame = Frame()\r\nprint(appFrame.x,appFrame.y) --> 10, 10\r\n```\r\n\r\nA derived class can __overload any method__ defined in its base class (or mother class). Therefore, the derived class still has access to his mother class methods via a special key named <tt>super</tt>.<br/>\r\nLet's use this feature to build a class constructor for our <tt>Frame</tt> class.\r\n\r\n```lua\r\n-- The base class \"Window\"\r\nWindow = class { width = 100, height = 100, x = 10, y = 10}\r\nfunction Window:__init(x,y,width,height)\r\n  self.x,self.y = x,y\r\n  self.width,self.height = width,height\r\nend\r\n\r\nfunction Window:set(x,y)\r\n  self.x, self.y = x, y\r\nend\r\n\r\n-- A derived class named \"Frame\"\r\nFrame = Window:extends { color = 'black' }\r\nfunction Frame:__init(x,y,width,height,color)\r\n  -- Calling the superclass constructor\r\n  Frame.super.__init(self,x,y,width,height)\r\n  -- Setting the extra class member\r\n  self.color = color\r\nend\r\n\r\n-- Overloading Window:set()\r\nfunction Frame:set(x,y)\r\n  self.x = x - self.width/2\r\n  self.y = y - self.height/2\r\nend\r\n\r\n-- A appFrame from \"Frame\" class\r\nappFrame = Frame(100,100,800,600,'red')\r\nprint(appFrame.x,appFrame.y) --> 100, 100\r\n\r\nappFrame:set(400,400)\r\nprint(appFrame.x,appFrame.y) --> 0, 100\r\n\r\nappFrame.super.set(appFrame,400,300)\r\nprint(appFrame.x,appFrame.y) --> 400, 300\r\n```\r\n##Chained initialisation\r\nIn a single inheritance model, <tt>**__init**</tt> constructor can be chained from one class to another.\r\n\r\n```lua\r\n-- A mother class 'A'\r\nlocal A = Class()\r\nfunction A.__init(instance,a)\r\n  instance.a = a\r\nend\r\n\r\n-- Class 'B', deriving from class 'A'\r\nlocal B = A:extends()\r\nfunction B.__init(instance, a, b)\r\n  B.super.__init(instance, a)\r\n  instance.b = b\r\nend\r\n\r\n-- Class 'C', deriving from class 'B'\r\nlocal C = B:extends()\r\nfunction C.__init(instance, a, b, c)\r\n  C.super.__init(instance,a, b)\r\n  instance.c = c\r\nend\r\n\r\n-- Class 'D', deriving from class 'C'\r\nlocal D = C:extends()\r\nfunction D.__init(instance, a, b, c, d)\r\n  D.super.__init(instance,a, b, c)\r\n  instance.d = d\r\nend\r\n\r\n-- Creating an instance of class 'D'\r\nlocal objD = D(1,2,3,4)\r\nfor k,v in pairs(objD) do print(k,v) end\r\n\r\n-- Output:\r\n--> a\t1\r\n--> d\t4\r\n--> c\t3\r\n--> b\t2\r\n```\r\n\r\n##Printing classes and objects\r\nAs of [v0.4.0](https://github.com/Yonaba/30log/blob/master/version_history.md), ay attempt to [print](http://pgl.yoyo.org/luai/i/print) or [tostring](http://pgl.yoyo.org/luai/i/tostring) \r\na __class__ or an __instance__ will return a special string, mostly useful when debugging.\r\n\r\nLet's illustrate this, with an unnamed __Cat__ class:\r\n\r\n```lua\r\n-- A Cat Class\r\nlocal Cat = class()\r\nprint(Cat) --> \"class (Unnamed): <table: 00550AD0>\"\r\n\r\nlocal kitten = Cat()\r\nprint(kitten) --> \"object (of Unnamed): <table: 00550C10>\"\r\n````\r\n\r\nLet's define a named __Cat__ class now:\r\n\r\n```lua\r\n-- A Cat Class\r\nlocal Cat = class()\r\nCat.__name = 'Cat'\r\nprint(Cat) --> \"class (Cat): <table: 00411858>\"\r\n\r\nlocal kitten = Cat()\r\nprint(kitten) --> \"object (of Cat): <table: 00411880>\"\r\n````\r\n\r\n##Class Commons support\r\n[Class-Commons](https://github.com/bartbes/Class-Commons) is an interface that provides a common API for lua classes libraries.\r\n\r\n```lua\r\nrequire(\"30logclasscommons\")\r\n\r\ncommon.class(...)\r\ncommon.instance(...)\r\n```\r\n\r\n##Specification\r\n\r\n###30log Specs\r\nSpecs tests have been included.<br/>\r\nRun them using [Telescope](https://github.com/norman/telescope) with the following command from the root foolder:\r\n```\r\ntsc -f specs/*\r\n```\r\n\r\n````\r\n------------------------------------------------------------------------\r\nClass():                                                             \r\nWhen Class is called with no args passed:                            \r\n  it returns a new class (regular Lua table)                         [P]\r\nAttributes:                                                          \r\n  can be added to classes                                            [P]\r\n  can be passed in a table to Class()                                [P]\r\nMethods:                                                             \r\n  can be added to classes                                            [P]\r\ntostring:                                                            \r\n  classes can be stringified                                         [P]\r\nnamed classes:                                                       \r\n  classes can be named implementing the special attribute __name     [P]\r\n------------------------------------------------------------------------\r\nDerivation (Inheritance):                                            \r\nClass can be derived from a superclass:                              \r\n  Via \"extends()\" method                                             [P]\r\n  With extra-arguments passed to method \"extends()\" as a table       [P]\r\nA derived class still points to its superclass:                      \r\n  Via its \"super\" key                                                [P]\r\n  Via \"getmetatable()\" function                                      [P]\r\nA derived class:                                                     \r\n  can instantiate objects                                            [P]\r\n  shares its superclass attributes                                   [P]\r\n  shares its superclass methods                                      [P]\r\n  can reimplement its superclass methods                             [P]\r\n  Yet, it still has access to the original superclass method         [P]\r\nIn a single inheritance model:                                       \r\n  __init() class constructor can chain                               [P]\r\n------------------------------------------------------------------------\r\nInstances (Objects):                                                 \r\nWhen a class is created:                                             \r\n  new objects can be created via Class:new()                         [P]\r\n  new objects can be created calling the class as a function         [P]\r\n  new objects share their class attributes                           [P]\r\n  new objects share their class methods                              [P]\r\nProviding an :__init() method to classes:                            \r\n  Overrides instantiation scheme with Class:new()                    [P]\r\n  Overrides instantiation scheme with Class()                        [P]\r\n.__init can also be a table of named args for static instantiati...: \r\n  Overrides instantiation scheme with Class:new()                    [P]\r\n  Overrides instantiation scheme with Class()                        [P]\r\ntostring:                                                            \r\n  objects from unnammed classes can be stringified                   [P]\r\n  objects from named classes can be stringified                      [P]\r\n------------------------------------------------------------------------\r\n26 tests 26 passed 43 assertions 0 failed 0 errors 0 unassertive 0 pending\r\n````\r\n\r\n###Class-Commons testing implementation\r\nSee [Class-Commons-Tests](https://github.com/bartbes/Class-Commons-Tests)\r\n\r\n```\r\n$ lua tests.lua 30logclasscommons\r\nTesting implementation: 30logclasscommons\r\n  Summary:\r\n    Failed: 0\r\n    Out of: 10\r\n    Rate: 100%\r\n```\r\n\r\n##Contributors\r\n* [TsT2005](https://github.com/tst2005), for Class-commons support.\r\n\r\n\r\n##License\r\nThis work is under [MIT-LICENSE](http://www.opensource.org/licenses/mit-license.php)<br/>\r\nCopyright (c) 2012 Roland Yonaba\r\n\r\n    Permission is hereby granted, free of charge, to any person obtaining a\r\n    copy of this software and associated documentation files (the\r\n    \"Software\"), to deal in the Software without restriction, including\r\n    without limitation the rights to use, copy, modify, merge, publish,\r\n    distribute, sublicense, and/or sell copies of the Software, and to\r\n    permit persons to whom the Software is furnished to do so, subject to\r\n    the following conditions:\r\n\r\n    The above copyright notice and this permission notice shall be included\r\n    in all copies or substantial portions of the Software.\r\n\r\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n    OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\n    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\n    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\n    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n","google":"UA-33850683-1","note":"Don't delete this file! It's used internally to help with page regeneration."}